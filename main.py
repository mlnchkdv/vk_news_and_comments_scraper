import streamlit as st
import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import pytz
import re
from concurrent.futures import ThreadPoolExecutor, as_completed
import plotly.graph_objects as go

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_POSTS_PER_REQUEST = 200
DEFAULT_TIME_STEP = timedelta(hours=24)
MAX_RETRIES = 3
DEFAULT_PAUSE = 5
MAX_PAUSE = 10

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API VK
def execute_query(api_key, owner_id, query, start_time, end_time, search_mode):
    params = {
        "access_token": api_key,
        "v": "5.131",
        "owner_id": owner_id,
        "query": query,
        "count": MAX_POSTS_PER_REQUEST,
        "start_time": start_time,
        "end_time": end_time,
    }
    
    if search_mode == "–¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞":
        params["search_own"] = 1
    
    response = requests.get("https://api.vk.com/method/wall.search", params=params)
    data = response.json()
    
    if "error" in data:
        if data["error"]["error_code"] == 6:
            raise Exception("API key is temporarily banned due to too many requests")
        else:
            raise Exception(f"API Error: {data['error']['error_msg']}")
    
    return data.get("response", {}).get("items", [])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
def get_comments(api_key, owner_id, post_id):
    params = {
        "access_token": api_key,
        "v": "5.131",
        "owner_id": owner_id,
        "post_id": post_id,
        "count": 200,
        "sort": "asc",
        "extended": 1,
    }
    
    response = requests.get("https://api.vk.com/method/wall.getComments", params=params)
    data = response.json()
    
    if "error" in data:
        if data["error"]["error_code"] == 6:
            raise Exception("API key is temporarily banned due to too many requests")
        else:
            raise Exception(f"API Error: {data['error']['error_msg']}")
    
    return data.get("response", {}).get("items", [])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤
def process_posts(api_keys, owner_id, queries, start_date, end_date, search_mode, time_step, pause):
    start_time = int(start_date.timestamp())
    end_time = int(end_date.timestamp())
    current_time = start_time
    all_posts = []
    total_requests = 0
    api_key_index = 0

    progress_bar = st.progress(0)
    status_text = st.empty()
    start_process_time = time.time()

    while current_time < end_time:
        next_time = min(current_time + int(time_step.total_seconds()), end_time)
        
        for query in queries:
            try:
                posts = execute_query(api_keys[api_key_index], owner_id, query, current_time, next_time, search_mode)
                all_posts.extend(posts)
                total_requests += 1
                
                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π API –∫–ª—é—á
                api_key_index = (api_key_index + 1) % len(api_keys)
                
                time.sleep(pause)
            except Exception as e:
                st.error(f"Error: {str(e)}")
                if "API key is temporarily banned" in str(e):
                    st.warning(f"API key {api_keys[api_key_index]} is temporarily banned. Switching to the next key.")
                    api_key_index = (api_key_index + 1) % len(api_keys)
                    if api_key_index == 0:
                        st.error("All API keys are banned. Please wait and try again later.")
                        return []
                else:
                    return []

        progress = (current_time - start_time) / (end_time - start_time)
        progress_bar.progress(progress)
        
        elapsed_time = time.time() - start_process_time
        estimated_total_time = elapsed_time / progress if progress > 0 else 0
        remaining_time = estimated_total_time - elapsed_time
        
        status_text.text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.2%}. –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {timedelta(seconds=int(elapsed_time))}. –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {timedelta(seconds=int(remaining_time))}. –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        
        current_time = next_time

    progress_bar.progress(1.0)
    status_text.text(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}. –û–±—â–µ–µ –≤—Ä–µ–º—è: {timedelta(seconds=int(time.time() - start_process_time))}")

    return all_posts

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
def format_datetime(timestamp):
    return datetime.fromtimestamp(timestamp).strftime("%Y-%m-%d %H:%M:%S")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def create_chart(df, group_by):
    if group_by == 'hour':
        df['grouped_time'] = df['date'].dt.floor('H')
    elif group_by == 'day':
        df['grouped_time'] = df['date'].dt.floor('D')
    elif group_by == 'week':
        df['grouped_time'] = df['date'].dt.to_period('W').apply(lambda r: r.start_time)
    elif group_by == 'month':
        df['grouped_time'] = df['date'].dt.to_period('M').apply(lambda r: r.start_time)
    
    grouped_data = df.groupby('grouped_time').size().reset_index(name='count')
    
    fig = go.Figure(data=[go.Bar(x=grouped_data['grouped_time'], y=grouped_data['count'])])
    fig.update_layout(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
                      xaxis_title='–í—Ä–µ–º—è',
                      yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤')
    return fig

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.set_page_config(page_title="VK News Scraper", page_icon="üì∞", layout="wide")
    st.title("VK News Scraper")

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tabs = st.tabs(["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])

    with tabs[0]:
        st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫")
        if 'df' in st.session_state and not st.session_state.df.empty:
            st.write(f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(st.session_state.df)}")
            st.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {st.session_state.df['from_id'].nunique()}")
            st.write(f"–ü–µ—Ä–∏–æ–¥: —Å {st.session_state.df['date'].min()} –ø–æ {st.session_state.df['date'].max()}")
            
            group_by = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", ['hour', 'day', 'week', 'month'])
            chart = create_chart(st.session_state.df, group_by)
            st.plotly_chart(chart)
        else:
            st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥—Ä–∞—Ñ–∏–∫.")

    with tabs[1]:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        with st.expander("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"):
            st.markdown("""
            1. –í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1 –¥–ª—è –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ).
            2. –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π VK.
            3. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏.
            4. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞: "–¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞" –∏–ª–∏ "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ".
            5. –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.
            6. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.
            7. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞.
            8. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

            ### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏:
            - –ù–∞—á–Ω–∏—Ç–µ —Å 5 —Å–µ–∫—É–Ω–¥ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π.
            - –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö API –∫–ª—é—á–µ–π –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—å—à—É—é –ø–∞—É–∑—É.
            - –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–∞—É–∑—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
            """)

        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–æ–≤–µ—Ç—ã
        with st.expander("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–æ–≤–µ—Ç—ã"):
            st.markdown("""
            ### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
            - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API VK –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
            - –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏.
            - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Streamlit –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
            - –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é pandas –∏ numpy.
            - –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º plotly.

            ### –°–æ–≤–µ—Ç—ã –ø–æ –≤—ã–≥—Ä—É–∑–∫–µ –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤:
            1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏.
            2. –£–≤–µ–ª–∏—á—å—Ç–µ –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
            3. –†–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
            4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞.
            5. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
            6. –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
            7. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
            """)

        # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        owner_id = st.text_input("ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1 –¥–ª—è –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ)")
        
        api_keys = []
        api_key = st.text_input("API –∫–ª—é—á VK", key="api_key_0")
        api_keys.append(api_key)
        
        num_extra_keys = st.session_state.get('num_extra_keys', 0)
        
        for i in range(num_extra_keys):
            extra_key = st.text_input(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á VK #{i+1}", key=f"api_key_{i+1}")
            api_keys.append(extra_key)
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω API –∫–ª—é—á"):
            st.session_state.num_extra_keys = num_extra_keys + 1
            st.experimental_rerun()
        
        queries = st.text_area("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∑–∞–ø—è—Ç—ã–º–∏)")
        search_mode = st.radio("–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞", ["–¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞", "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"])
        
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞")
            start_time = st.time_input("–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", value=datetime.min.time())
        with col2:
            end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞")
            end_time = st.time_input("–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è", value=datetime.max.time())
        
        start_datetime = datetime.combine(start_date, start_time)
        end_datetime = datetime.combine(end_date, end_time)
        
        time_step = st.slider("–®–∞–≥ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å—ã)", 1, 168, 24)
        pause = st.slider("–ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)", 1, MAX_PAUSE, DEFAULT_PAUSE)

        if st.button("–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"):
            if not owner_id or not api_keys[0] or not queries:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.")
            else:
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫..."):
                    queries_list = [q.strip() for q in queries.split(',')]
                    posts = process_posts(api_keys, owner_id, queries_list, start_datetime, end_datetime, search_mode, timedelta(hours=time_step), pause)
                    
                    if posts:
                        df = pd.DataFrame(posts)
                        df['date'] = pd.to_datetime(df['date'], unit='s')
                        df['text'] = df['text'].fillna('')
                        
                        st.session_state.df = df
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤.")
                    else:
                        st.warning("–ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    with tabs[2]:
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        if 'df' in st.session_state and not st.session_state.df.empty:
            st.write(st.session_state.df)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            sort_column = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", st.session_state.df.columns)
            sort_order = st.radio("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", ["–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é", "–ü–æ —É–±—ã–≤–∞–Ω–∏—é"])
            
            sorted_df = st.session_state.df.sort_values(by=sort_column, ascending=(sort_order == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é"))
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            for _, row in sorted_df.iterrows():
                st.subheader(f"–ü–æ—Å—Ç –æ—Ç {row['date']}")
                st.write(row['text'])
                st.write(f"–õ–∞–π–∫–∏: {row['likes']['count']}, –†–µ–ø–æ—Å—Ç—ã: {row['reposts']['count']}, –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {row.get('views', {}).get('count', 'N/A')}")
                
                if st.button(f"–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {row['id']}"):
                    comments = get_comments(api_keys[0], owner_id, row['id'])
                    if comments:
                        st.write("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
                        for comment in comments:
                            st.text(f"{comment['from_id']} ({format_datetime(comment['date'])}): {comment['text']}")
                    else:
                        st.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            csv = sorted_df.to_csv(index=False)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ CSV",
                data=csv,
                file_name="vk_posts.csv",
                mime="text/csv",
            )
        else:
            st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")

if __name__ == "__main__":
    main()