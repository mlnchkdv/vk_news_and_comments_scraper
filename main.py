import streamlit as st
import requests
import pandas as pd
import time
import datetime
import re
from concurrent.futures import ThreadPoolExecutor, as_completed

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è datetime –≤ UNIX-–≤—Ä–µ–º—è
def get_unixtime_from_datetime(dt):
    return int(time.mktime(dt.timetuple()))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
def get_comments(post_id, owner_id, access_token):
    url = (
        f"https://api.vk.com/method/wall.getComments?"
        f"owner_id={owner_id}&post_id={post_id}&access_token={access_token}&v=5.131"
    )
    try:
        res = requests.get(url)
        json_text = res.json()
        return json_text.get('response', {}).get('items', [])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ VK API
def execute_query(query, current_time, delta, access_token, include_comments, search_mode):
    url = (
        f"https://api.vk.com/method/newsfeed.search?q={query}"
        f"&count=200"
        f"&access_token={access_token}"
        f"&start_time={get_unixtime_from_datetime(current_time)}"
        f"&end_time={get_unixtime_from_datetime(current_time + delta)}"
        f"&v=5.131"
    )

    posts = []
    comments = []

    try:
        res = requests.get(url)
        json_text = res.json()

        if 'response' in json_text and 'items' in json_text['response']:
            for item in json_text['response']['items']:
                if search_mode == 'exact':
                    if re.search(r'\b' + re.escape(query) + r'\b', item['text'], re.IGNORECASE):
                        item['matched_query'] = query
                        posts.append(item)
                else:
                    if query.lower() in item['text'].lower():
                        item['matched_query'] = query
                        posts.append(item)

                if include_comments:
                    post_comments = get_comments(item['id'], item['owner_id'], access_token)
                    for comment in post_comments:
                        comment['post_id'] = item['id']
                        comment['post_owner_id'] = item['owner_id']
                    comments.extend(post_comments)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    return posts, comments

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç—ã VK
def get_vk_newsfeed(queries, start_datetime, end_datetime, access_token, include_comments, progress_bar, status_text, time_sleep, search_mode):
    all_posts = []
    all_comments = []

    delta = datetime.timedelta(hours=1)  # –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 1 —á–∞—Å–∞ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    current_time = start_datetime

    total_seconds = (end_datetime - start_datetime).total_seconds()
    start_time = time.time()

    with ThreadPoolExecutor(max_workers=10) as executor:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        future_to_query = {}
        while current_time <= end_datetime:
            for query in queries:
                future = executor.submit(execute_query, query, current_time, delta, access_token, include_comments, search_mode)
                future_to_query[future] = query

            for future in as_completed(future_to_query):
                query = future_to_query[future]
                try:
                    posts, comments = future.result()
                    all_posts.extend(posts)
                    all_comments.extend(comments)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")

            elapsed_time = time.time() - start_time
            progress = min(elapsed_time / total_seconds, 1.0)
            progress_bar.progress(progress)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            current_posts = len(all_posts)
            current_comments = len(all_comments)
            status_text.text(f"‚è≥ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.2f} —Å–µ–∫ | üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {current_posts} | üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {current_comments} | üïí –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_time}")

            current_time += delta
            time.sleep(time_sleep)

    df = pd.DataFrame(all_posts)
    comments_df = pd.DataFrame(all_comments)

    return df, comments_df

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.set_page_config(page_title="VK Parser", page_icon="üìä", layout="wide")

    st.title("üìä VK –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

    with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
        st.markdown("""
        1. üîë **–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω VK API**:
           - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ [vkhost.github.io](https://vkhost.github.io/)
           - –ù–∞–∂–º–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", –≤—ã–±–µ—Ä–∏—Ç–µ "–°—Ç–µ–Ω–∞" –∏ "–î–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
           - –ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å" –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø
           - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ URL (–º–µ–∂–¥—É `access_token=` –∏ `&expires_in=`)
        
        2. üìù **–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã**:
           - –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
           - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        
        3. üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞**:
           - –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã
        
        4. üîç **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞**:
           - –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ (—Ç–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
           - –£–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        
        5. üöÄ **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥**:
           - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"
           - –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        
        6. üìä **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**:
           - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
           - –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ
        """)

    access_token = st.text_input("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ VK API:", type="password")

    queries = st.text_area("üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")

    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:")
        start_time = st.time_input("üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:")
    with col2:
        end_date = st.date_input("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:")
        end_time = st.time_input("üïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:")
    
    start_datetime = datetime.datetime.combine(start_date, start_time)
    end_datetime = datetime.datetime.combine(end_date, end_time)
    
    include_comments = st.checkbox("üí¨ –í–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", value=True)
    time_sleep = st.slider("‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)", min_value=0.1, max_value=2.0, value=0.5, step=0.1)

    search_mode = st.radio("üîç –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:", ["–¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞", "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"])
    
    if 'full_df' not in st.session_state:
        st.session_state.full_df = None
    if 'comments_df' not in st.session_state:
        st.session_state.comments_df = None

    start_parsing = st.button("üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")

    if start_parsing:
        if not access_token or not queries or not start_date or not end_date:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
            return

        if (end_datetime - start_datetime).total_seconds() < 3600:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 1 —á–∞—Å
            st.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —á–∞—Å–∞.")
            return

        queries_list = [q.strip() for q in queries.split('\n') if q.strip()]

        progress_bar = st.progress(0)
        status_text = st.empty()

        status_text.text("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è...")
        df, comments_df = get_vk_newsfeed(queries_list, start_datetime, end_datetime, 
                                          access_token, include_comments, progress_bar, status_text, time_sleep,
                                          'exact' if search_mode == "–¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞" else 'partial')
        status_text.text("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

        if not df.empty:
            df['date'] = pd.to_datetime(df['date'], unit='s')
            
            # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
            columns_order = ['matched_query', 'text', 'date', 'id', 'owner_id', 'from_id', 'likes', 'reposts', 'views', 'comments']
            df = df.reindex(columns=columns_order + [col for col in df.columns if col not in columns_order])

            st.session_state.full_df = df
            st.session_state.comments_df = comments_df
        else:
            st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")

    if st.session_state.full_df is not None:
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞")
        
        tab1, tab2 = st.tabs(["üìù –ü–æ—Å—Ç—ã", "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"])
        
        with tab1:
            st.dataframe(st.session_state.full_df)
            csv = st.session_state.full_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ—Å—Ç—ã (CSV)",
                data=csv,
                file_name="vk_posts.csv",
                mime="text/csv",
            )
        
        with tab2:
            if include_comments and not st.session_state.comments_df.empty:
                st.dataframe(st.session_state.comments_df)
                comments_csv = st.session_state.comments_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (CSV)",
                    data=comments_csv,
                    file_name="vk_comments.csv",
                    mime="text/csv",
                )
            else:
                st.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø–∞—Ä—Å–∏–Ω–≥ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

if __name__ == "__main__":
    main()