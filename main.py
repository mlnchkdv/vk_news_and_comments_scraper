import streamlit as st
import requests
import pandas as pd
import time
import datetime
import re
from concurrent.futures import ThreadPoolExecutor, as_completed

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è datetime –≤ UNIX-–≤—Ä–µ–º—è
def get_unixtime_from_datetime(dt):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç datetime –≤ UNIX-–≤—Ä–µ–º—è.
    
    :param dt: –æ–±—ä–µ–∫—Ç datetime
    :return: UNIX-–≤—Ä–µ–º—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
    """
    return int(time.mktime(dt.timetuple()))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
def get_comments(post_id, owner_id, access_token):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É –ø–æ –µ–≥–æ ID –∏ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞.
    
    :param post_id: ID –ø–æ—Å—Ç–∞
    :param owner_id: ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å—Ç–∞
    :param access_token: —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ VK API
    :return: —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    """
    url = (
        f"https://api.vk.com/method/wall.getComments?"
        f"owner_id={owner_id}&post_id={post_id}&access_token={access_token}&v=5.131"
    )
    try:
        res = requests.get(url)
        json_text = res.json()
        if 'response' in json_text and 'items' in json_text['response']:
            return json_text['response']['items']
        else:
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ VK API
def execute_query(query, current_time, delta, access_token, include_comments, search_mode):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ VK API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤.
    
    :param query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    :param current_time: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    :param delta: –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    :param access_token: —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ VK API
    :param include_comments: —Ñ–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    :param search_mode: —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ ('exact' –∏–ª–∏ 'partial')
    :return: –∫–æ—Ä—Ç–µ–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    """
    url = (
        f"https://api.vk.com/method/newsfeed.search?q={query}"
        f"&count=200"
        f"&access_token={access_token}"
        f"&start_time={get_unixtime_from_datetime(current_time)}"
        f"&end_time={get_unixtime_from_datetime(current_time + delta)}"
        f"&v=5.131"
    )

    posts = []
    comments = []

    try:
        res = requests.get(url)
        json_text = res.json()

        if 'response' in json_text and 'items' in json_text['response']:
            for item in json_text['response']['items']:
                if search_mode == 'exact':
                    if re.search(r'\b' + re.escape(query) + r'\b', item['text'], re.IGNORECASE):
                        item['matched_query'] = query
                        posts.append(item)
                else:
                    if query.lower() in item['text'].lower():
                        item['matched_query'] = query
                        posts.append(item)

                if include_comments:
                    post_comments = get_comments(item['id'], item['owner_id'], access_token)
                    for comment in post_comments:
                        comment['post_id'] = item['id']
                        comment['post_owner_id'] = item['owner_id']
                    comments.extend(post_comments)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    return posts, comments

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç—ã VK
def get_vk_newsfeed(queries, start_datetime, end_datetime, access_token, include_comments, progress_bar, time_sleep, search_mode):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—É—é –ª–µ–Ω—Ç—É VK –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    
    :param queries: —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    :param start_datetime: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
    :param end_datetime: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
    :param access_token: —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ VK API
    :param include_comments: —Ñ–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    :param progress_bar: –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    :param time_sleep: –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    :param search_mode: —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ ('exact' –∏–ª–∏ 'partial')
    :return: –∫–æ—Ä—Ç–µ–∂ –∏–∑ DataFrame —Å –ø–æ—Å—Ç–∞–º–∏ –∏ DataFrame —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    """
    all_posts = []
    all_comments = []

    delta = datetime.timedelta(days=1)
    current_time = start_datetime

    total_seconds = (end_datetime - start_datetime).total_seconds()
    start_time = time.time()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    with ThreadPoolExecutor(max_workers=5) as executor:
        future_to_query = {}
        while current_time <= end_datetime:
            for query in queries:
                future = executor.submit(execute_query, query, current_time, delta, access_token, include_comments, search_mode)
                future_to_query[future] = query

            for future in as_completed(future_to_query):
                query = future_to_query[future]
                try:
                    posts, comments = future.result()
                    all_posts.extend(posts)
                    all_comments.extend(comments)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")

            elapsed_time = time.time() - start_time
            progress = min(elapsed_time / total_seconds, 1.0)
            progress_bar.progress(progress)

            current_time += delta
            time.sleep(time_sleep)

    df = pd.DataFrame(all_posts)
    comments_df = pd.DataFrame(all_comments)

    return df, comments_df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
def display_post_with_comments(post, comments):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å—Ç —Å –µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.
    
    :param post: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞
    :param comments: —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
    """
    st.write(f"**üìå Post ID:** {post['id']}")
    st.write(f"**üïí Date:** {post['date']}")
    st.write(f"**üìù Text:** {post['text']}")
    st.write(f"**üîç Matched Query:** {post['matched_query']}")
    st.write(f"üëç {post.get('likes', {}).get('count', 'N/A')} | üîÅ {post.get('reposts', {}).get('count', 'N/A')} | üëÄ {post.get('views', {}).get('count', 'N/A')}")
    st.write("**üí¨ Comments:**")
    for comment in comments:
        st.text(f"üë§ {comment['from_id']} ({comment['date']}): {comment['text']}")
    st.write("---")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    lang = st.sidebar.selectbox("Language / –Ø–∑—ã–∫", ["English", "–†—É—Å—Å–∫–∏–π"])

    # –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    texts = {
        "English": {
            "title": "üìä VK News and Comments Parser",
            "description": "This application allows you to search for posts and comments on VK (VKontakte) using keywords or phrases. You can specify the time period, include comments, and view the results in various formats.",
            "token_instruction": "üîë How to get VK API access token",
            "token_input": "Enter your VK API access token:",
            "queries_instruction": "Enter your search queries. Each query should be on a new line.",
            "queries_input": "Enter keywords or expressions (one per line):",
            "start_date": "Start date:",
            "start_time": "Start time:",
            "end_date": "End date:",
            "end_time": "End time:",
            "include_comments": "Include comments",
            "time_sleep": "Time sleep between requests (seconds)",
            "start_parsing": "üöÄ Start Parsing",
            "select_columns": "Select columns to display and save",
            "posts": "üìù Posts",
            "comments": "üí¨ Comments",
            "display_option": "Choose display option",
            "table_view": "Table view",
            "post_view": "Post view",
            "sort_posts": "Sort posts by",
            "most_commented": "Most commented",
            "newest": "Newest",
            "oldest": "Oldest",
            "top_posts": "Number of top posts to display",
            "search_mode": "Search mode",
            "exact_search": "Exact phrase",
            "partial_search": "Partial match",
            "search_mode_instruction": "Choose the search mode:",
            "token_instructions": """
            To generate an `access token`:
            1. Go to https://vkhost.github.io/
            2. Click on `Settings ¬ª`
            3. Select `Wall` and `Access at any time`
            4. Click on the `Get` button
            5. Confirm access to your account by clicking `Allow`
            6. In the resulting URL, find the part between `access_token=` and `&expires_in=`
            7. Copy this token and paste it in the field below
            """,
            "search_mode_example": """
            Example:
            - Exact phrase: "data science" will find posts containing exactly "data science"
            - Partial match: "data science" will find posts containing "data" or "science" separately
            """
        },
        "–†—É—Å—Å–∫–∏–π": {
            "title": "üìä –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ",
            "description": "–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã. –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥, –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.",
            "token_instruction": "üîë –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ VK API",
            "token_input": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ VK API:",
            "queries_instruction": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.",
            "queries_input": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
            "start_date": "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:",
            "start_time": "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
            "end_date": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
            "end_time": "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
            "include_comments": "–í–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
            "time_sleep": "–ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)",
            "start_parsing": "üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥",
            "select_columns": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            "posts": "üìù –ü–æ—Å—Ç—ã",
            "comments": "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
            "display_option": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "table_view": "–¢–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥",
            "post_view": "–í–∏–¥ –ø–æ—Å—Ç–æ–≤",
            "sort_posts": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ",
            "most_commented": "–°–∞–º—ã–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º—ã–µ",
            "newest": "–ù–æ–≤–µ–π—à–∏–µ",
            "oldest": "–°—Ç–∞—Ä–µ–π—à–∏–µ",
            "top_posts": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ç–æ–ø-–ø–æ—Å—Ç–æ–≤",
            "search_mode": "–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞",
            "exact_search": "–¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞",
            "partial_search": "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ",
            "search_mode_instruction": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:",
            "token_instructions": """
            –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ `access token` –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
            1. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç https://vkhost.github.io/
            2. –ù–∞–∂–∞—Ç—å –Ω–∞ `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ¬ª`
            3. –í—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç—ã `–°—Ç–µ–Ω–∞` –∏ `–î–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è`
            4. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É `–ü–æ–ª—É—á–∏—Ç—å`
            5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –Ω–∞–∂–∞–≤ `–†–∞–∑—Ä–µ—à–∏—Ç—å`
            6. –í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è URL –Ω–∞–π–¥–∏—Ç–µ —á–∞—Å—Ç—å –º–µ–∂–¥—É `access_token=` –∏ `&expires_in=`
            7. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ
            """,
            "search_mode_example": """
            –ü—Ä–∏–º–µ—Ä:
            - –¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞: "–Ω–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö" –Ω–∞–π–¥–µ—Ç –ø–æ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ—á–Ω–æ "–Ω–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö"
            - –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "–Ω–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö" –Ω–∞–π–¥–µ—Ç –ø–æ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "–Ω–∞—É–∫–∞" –∏–ª–∏ "–¥–∞–Ω–Ω—ã—Ö" –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
            """
        }
    }

    t = texts[lang]

    st.title(t["title"])
    st.write(t["description"])

    with st.expander(t["token_instruction"]):
        st.markdown(t["token_instructions"])

    access_token = st.text_input(t["token_input"], type="password")

    st.write(t["queries_instruction"])
    queries = st.text_area(t["queries_input"])

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        start_date = st.date_input(t["start_date"])
    with col2:
        start_time = st.time_input(t["start_time"])
    with col3:
        end_date = st.date_input(t["end_date"])
    with col4:
        end_time = st.time_input(t["end_time"])
    
    start_datetime = datetime.datetime.combine(start_date, start_time)
    end_datetime = datetime.datetime.combine(end_date, end_time)
    
    include_comments = st.checkbox(t["include_comments"], value=True)
    time_sleep = st.slider(t["time_sleep"], min_value=0.1, max_value=6.0, value=0.5, step=0.1)

    st.write(t["search_mode_instruction"])
    search_mode = st.radio(t["search_mode"], [t["exact_search"], t["partial_search"]])
    st.info(t["search_mode_example"])

    if 'full_df' not in st.session_state:
        st.session_state.full_df = None
    if 'comments_df' not in st.session_state:
        st.session_state.comments_df = None

    start_parsing = st.button(t["start_parsing"])

    if start_parsing:
        if not access_token or not queries or not start_date or not end_date:
            st.error("Please fill in all fields.")
            return

        if (end_datetime - start_datetime).total_seconds() < 86400:  # 86400 seconds in a day
            st.error("The minimum parsing period should be at least 1 day.")
            return

        queries_list = [q.strip() for q in queries.split('\n') if q.strip()]

        progress_bar = st.progress(0)
        status_text = st.empty()

        status_text.text("Parsing in progress...")
        df, comments_df = get_vk_newsfeed(queries_list, start_datetime, end_datetime, 
                                          access_token, include_comments, progress_bar, time_sleep,
                                          'exact' if search_mode == t["exact_search"] else 'partial')
        status_text.text("Parsing completed!")

        if not df.empty:
            # Convert Unix timestamp to readable date
            df['date'] = pd.to_datetime(df['date'], unit='s')

            # Store the full dataset in session state
            st.session_state.full_df = df
            st.session_state.comments_df = comments_df
        else:
            st.warning("No data found for the given parameters.")

    if st.session_state.full_df is not None:
        # Allow user to select columns after data is loaded
        all_columns = st.session_state.full_df.columns.tolist()
        selected_columns = st.multiselect(t["select_columns"], all_columns, default=all_columns, key='selected_columns')

        st.subheader(t["posts"])
        st.write(st.session_state.full_df[selected_columns])

        csv = st.session_state.full_df[selected_columns].to_csv(index=False).encode('utf-8')
        st.download_button(
            label="Download Posts CSV",
            data=csv,
            file_name="vk_posts.csv",
            mime="text/csv",
        )

        if include_comments and not st.session_state.comments_df.empty:
            st.subheader(t["comments"])
            display_option = st.radio(t["display_option"], [t["table_view"], t["post_view"]])
            
            if display_option == t["table_view"]:
                st.write(st.session_state.comments_df)

                comments_csv = st.session_state.comments_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="Download Comments CSV",
                    data=comments_csv,
                    file_name="vk_comments.csv",
                    mime="text/csv",
                )
            else:  # Post view
                # Prepare data for post view
                posts_with_comments = st.session_state.full_df.copy()
                posts_with_comments['comments'] = posts_with_comments['id'].apply(
                    lambda x: st.session_state.comments_df[st.session_state.comments_df['post_id'] == x].to_dict('records')
                )
                posts_with_comments['comment_count'] = posts_with_comments['comments'].apply(len)

                # Sorting options
                sort_option = st.selectbox(t["sort_posts"], [t["most_commented"], t["newest"], t["oldest"]])
                if sort_option == t["most_commented"]:
                    posts_with_comments = posts_with_comments.sort_values('comment_count', ascending=False)
                elif sort_option == t["newest"]:
                    posts_with_comments = posts_with_comments.sort_values('date', ascending=False)
                else:  # Oldest
                    posts_with_comments = posts_with_comments.sort_values('date')

                # Number of top posts to display
                top_n = st.slider(t["top_posts"], min_value=1, max_value=len(posts_with_comments), value=5)

                # Display posts with comments
                for _, post in posts_with_comments.head(top_n).iterrows():
                    display_post_with_comments(post, post['comments'])

if __name__ == "__main__":
    main()