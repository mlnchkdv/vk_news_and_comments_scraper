import streamlit as st
import requests
import pandas as pd
import time
import datetime
import re
import random
from concurrent.futures import ThreadPoolExecutor, as_completed

def get_unixtime_from_datetime(dt):
    return int(time.mktime(dt.timetuple()))

def get_comments(post_id, owner_id, access_tokens):
    # Randomly select one token from the pool
    access_token = random.choice(access_tokens)
    
    url = (
        f"https://api.vk.com/method/wall.getComments?"
        f"owner_id={owner_id}&post_id={post_id}&access_token={access_token}&v=5.131"
    )
    try:
        res = requests.get(url)
        json_text = res.json()
        return json_text.get('response', {}).get('items', [])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        return []

def execute_query(query, start_time, end_time, access_tokens, include_comments, search_mode):
    # Randomly select one token from the pool for load balancing
    access_token = random.choice(access_tokens)
    
    url = (
        f"https://api.vk.com/method/newsfeed.search?q={query}"
        f"&count=200"
        f"&access_token={access_token}"
        f"&start_time={start_time}"
        f"&end_time={end_time}"
        f"&v=5.131"
    )

    posts = []
    comments = []

    try:
        res = requests.get(url)
        json_text = res.json()

        if 'response' in json_text and 'items' in json_text['response']:
            for item in json_text['response']['items']:
                if search_mode == 'exact':
                    if re.search(r'\b' + re.escape(query) + r'\b', item.get('text', ''), re.IGNORECASE):
                        item['matched_query'] = query
                        posts.append(item)
                else:
                    if query.lower() in item.get('text', '').lower():
                        item['matched_query'] = query
                        posts.append(item)

                if include_comments:
                    post_comments = get_comments(item['id'], item['owner_id'], access_tokens)
                    for comment in post_comments:
                        comment['post_id'] = item['id']
                        comment['post_owner_id'] = item['owner_id']
                    comments.extend(post_comments)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    return posts, comments

def get_vk_newsfeed(queries, start_datetime, end_datetime, access_tokens, include_comments, progress_bar, status_text, time_sleep, search_mode, time_step):
    all_posts = []
    all_comments = []

    delta = datetime.timedelta(hours=time_step)
    current_time = start_datetime

    total_steps = int((end_datetime - start_datetime) / delta)
    step_count = 0

    start_time = time.time()

    with ThreadPoolExecutor(max_workers=10) as executor:
        while current_time < end_datetime:
            step_count += 1
            futures = []
            for query in queries:
                end_time = min(current_time + delta, end_datetime)
                futures.append(executor.submit(
                    execute_query, 
                    query, 
                    get_unixtime_from_datetime(current_time),
                    get_unixtime_from_datetime(end_time),
                    access_tokens, 
                    include_comments, 
                    search_mode
                ))

            for future in as_completed(futures):
                posts, comments = future.result()
                all_posts.extend(posts)
                all_comments.extend(comments)

            progress = step_count / total_steps
            progress_bar.progress(progress)

            elapsed_time = time.time() - start_time
            eta = (elapsed_time / progress) - elapsed_time if progress > 0 else 0

            status_text.text(
                f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.2%} | ‚åõ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.1f} —Å–µ–∫\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)} | üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(all_comments)}\n"
                f"üïí –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_time} | ‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {eta/60:.1f} –º–∏–Ω"
            )

            current_time += delta
            time.sleep(time_sleep)

    df = pd.DataFrame(all_posts)
    comments_df = pd.DataFrame(all_comments)

    return df, comments_df

def validate_tokens(tokens):
    valid_tokens = []
    invalid_tokens = []
    
    for token in tokens:
        if not token.strip():
            continue
            
        url = f"https://api.vk.com/method/users.get?access_token={token}&v=5.131"
        try:
            response = requests.get(url)
            result = response.json()
            if 'response' in result:
                valid_tokens.append(token)
            else:
                invalid_tokens.append(token)
        except:
            invalid_tokens.append(token)
    
    return valid_tokens, invalid_tokens

def main():
    st.set_page_config(page_title="VK Parser", page_icon="üìä", layout="wide")

    st.title("üìä VK –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

    with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
        st.markdown("""
        1. üîë **–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã VK API**:
           - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ [vkhost.github.io](https://vkhost.github.io/)
           - –ù–∞–∂–º–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", –≤—ã–±–µ—Ä–∏—Ç–µ "–°—Ç–µ–Ω–∞" –∏ "–î–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
           - –ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å" –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø
           - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ URL (–º–µ–∂–¥—É `access_token=` –∏ `&expires_in=`)
           - –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        
        2. üìù **–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã**:
           - –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
           - –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ—Ä–∞–∑—ã, –∑–∞–∫–ª—é—á–∏—Ç–µ –µ—ë –≤ –∫–∞–≤—ã—á–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
           - –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        
        3. üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞**:
           - –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è
           - –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —á–µ–º –±–æ–ª—å—à–µ –ø–µ—Ä–∏–æ–¥, —Ç–µ–º –¥–æ–ª—å—à–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–∞—Ä—Å–∏–Ω–≥
        
        4. üîç **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞**:
           - –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ (—Ç–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
           - –£–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞)
           - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à–∞–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–≤ —á–∞—Å–∞—Ö). –ú–µ–Ω—å—à–∏–π —à–∞–≥ –¥–∞—ë—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        
        5. üöÄ **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥**:
           - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"
           - –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
        
        6. üìä **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**:
           - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö "–ü–æ—Å—Ç—ã" –∏ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
           - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
           - –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        ‚ö†Ô∏è **–í–∞–∂–Ω–æ**: 
        - VK API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–æ 200 –Ω–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        - –ë–æ–ª—å—à–æ–π —à–∞–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        - –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–æ –∑–∞–º–µ–¥–ª—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–∫–æ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∏ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        - –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        """)

    tokens_input = st.text_area("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ VK API (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):", height=100)
    
    if 'validated_tokens' not in st.session_state:
        st.session_state.validated_tokens = []
    
    validate_button = st.button("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
    
    if validate_button:
        tokens_list = [token.strip() for token in tokens_input.split('\n') if token.strip()]
        if not tokens_list:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω.")
        else:
            with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤..."):
                valid_tokens, invalid_tokens = validate_tokens(tokens_list)
                st.session_state.validated_tokens = valid_tokens
                
                if valid_tokens:
                    st.success(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(valid_tokens)}")
                if invalid_tokens:
                    st.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(invalid_tokens)}")

    queries = st.text_area("üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        start_date = st.date_input("üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:")
    with col2:
        start_time = st.time_input("üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:")
    with col3:
        end_date = st.date_input("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:")
    with col4:
        end_time = st.time_input("üïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:")
    
    start_datetime = datetime.datetime.combine(start_date, start_time)
    end_datetime = datetime.datetime.combine(end_date, end_time)
    
    include_comments = st.checkbox("üí¨ –í–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", value=True)
    time_sleep = st.slider("‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)", min_value=0.1, max_value=2.0, value=0.5, step=0.1)

    search_mode = st.radio("üîç –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:", ["–¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞", "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"])
    
    time_step = st.slider("üìä –®–∞–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—á–∞—Å—ã)", min_value=1, max_value=24, value=1, step=1)
    
    if 'full_df' not in st.session_state:
        st.session_state.full_df = None
    if 'comments_df' not in st.session_state:
        st.session_state.comments_df = None

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    if 'token_stats' not in st.session_state:
        st.session_state.token_stats = {}

    start_parsing = st.button("üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")

    if start_parsing:
        if not st.session_state.validated_tokens:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω.")
            return
            
        if not queries or not start_date or not end_date:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
            return

        if (end_datetime - start_datetime).total_seconds() < 3600:
            st.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —á–∞—Å–∞.")
            return

        queries_list = [q.strip() for q in queries.split('\n') if q.strip()]

        progress_bar = st.progress(0)
        status_text = st.empty()

        token_count = len(st.session_state.validated_tokens)
        st.info(f"üîë –ü–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {token_count} —Ç–æ–∫–µ–Ω–æ–≤.")
        
        status_text.text("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è...")
        df, comments_df = get_vk_newsfeed(queries_list, start_datetime, end_datetime, 
                                          st.session_state.validated_tokens, include_comments, 
                                          progress_bar, status_text, time_sleep,
                                          'exact' if search_mode == "–¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞" else 'partial', time_step)
        status_text.text("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

        if not df.empty:
            df['date'] = pd.to_datetime(df['date'], unit='s')
            
            columns_order = ['matched_query', 'text', 'date', 'id', 'owner_id', 'from_id', 'likes', 'reposts', 'views', 'comments']
            df = df.reindex(columns=columns_order + [col for col in df.columns if col not in columns_order])

            st.session_state.full_df = df
            st.session_state.comments_df = comments_df
        else:
            st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")

    if st.session_state.full_df is not None:
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞")
        
        tab1, tab2, tab3, tab4 = st.tabs(["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìù –ü–æ—Å—Ç—ã", "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"])
        
        with tab1:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            st.subheader("üìä –ö–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.metric("üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤", len(st.session_state.full_df))
                if not st.session_state.comments_df.empty:
                    st.metric("üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", len(st.session_state.comments_df))
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                if not st.session_state.full_df.empty and 'date' in st.session_state.full_df.columns:
                    min_date = st.session_state.full_df['date'].min()
                    max_date = st.session_state.full_df['date'].max()
                    st.metric("üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö", f"{min_date.strftime('%d.%m.%Y')} - {max_date.strftime('%d.%m.%Y')}")
            
            with col2:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
                if not st.session_state.full_df.empty and 'matched_query' in st.session_state.full_df.columns:
                    query_counts = st.session_state.full_df['matched_query'].value_counts()
                    st.write("üîç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º:")
                    for query, count in query_counts.items():
                        st.write(f"- **{query}**: {count} –ø–æ—Å—Ç–æ–≤")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if not st.session_state.full_df.empty:
                st.subheader("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")
                if 'date' in st.session_state.full_df.columns:
                    df_by_date = st.session_state.full_df.copy()
                    df_by_date['date_only'] = df_by_date['date'].dt.date
                    date_counts = df_by_date.groupby('date_only').size().reset_index(name='count')
                    date_counts.columns = ['–î–∞—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤']
                    st.bar_chart(date_counts.set_index('–î–∞—Ç–∞'))
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∞–π–∫–∞–º –∏ —Ä–µ–ø–æ—Å—Ç–∞–º
                if 'likes' in st.session_state.full_df.columns and isinstance(st.session_state.full_df['likes'].iloc[0], dict):
                    st.subheader("üëç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏")
                    engagement_df = pd.DataFrame({
                        '–ü–æ—Å—Ç': range(1, len(st.session_state.full_df) + 1),
                        '–õ–∞–π–∫–∏': [post.get('count', 0) if isinstance(post, dict) else 0 for post in st.session_state.full_df['likes']],
                        '–†–µ–ø–æ—Å—Ç—ã': [post.get('count', 0) if isinstance(post, dict) else 0 for post in st.session_state.full_df['reposts']]
                    })
                    st.line_chart(engagement_df.set_index('–ü–æ—Å—Ç')[['–õ–∞–π–∫–∏', '–†–µ–ø–æ—Å—Ç—ã']])
        
        with tab2:
            st.dataframe(st.session_state.full_df)
            csv = st.session_state.full_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ—Å—Ç—ã (CSV)",
                data=csv,
                file_name="vk_posts.csv",
                mime="text/csv",
            )
        
        with tab3:
            if include_comments and not st.session_state.comments_df.empty:
                st.dataframe(st.session_state.comments_df)
                comments_csv = st.session_state.comments_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (CSV)",
                    data=comments_csv,
                    file_name="vk_comments.csv",
                    mime="text/csv",
                )
            else:
                st.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø–∞—Ä—Å–∏–Ω–≥ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        
        with tab4:
            st.subheader("üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
            def format_post_text(text, max_length=300):
                if len(text) > max_length:
                    return text[:max_length] + "..."
                return text
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ
            def display_post_info(post):
                with st.expander(f"üìù –ü–æ—Å—Ç –æ—Ç {post['date'].strftime('%d.%m.%Y %H:%M')} | –ó–∞–ø—Ä–æ—Å: {post['matched_query']}", expanded=False):
                    st.markdown(f"**–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:**\n{post['text']}")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        likes = post['likes'].get('count', 0) if isinstance(post['likes'], dict) else 0
                        st.metric("üëç –õ–∞–π–∫–∏", likes)
                    
                    with col2:
                        reposts = post['reposts'].get('count', 0) if isinstance(post['reposts'], dict) else 0
                        st.metric("üîÑ –†–µ–ø–æ—Å—Ç—ã", reposts)
                    
                    with col3:
                        comments_count = post['comments'].get('count', 0) if isinstance(post['comments'], dict) else 0
                        st.metric("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", comments_count)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
                    if not st.session_state.comments_df.empty:
                        post_comments = st.session_state.comments_df[
                            (st.session_state.comments_df['post_id'] == post['id']) & 
                            (st.session_state.comments_df['post_owner_id'] == post['owner_id'])
                        ]
                        
                        if not post_comments.empty:
                            st.markdown("### üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
                            for _, comment in post_comments.iterrows():
                                st.markdown(f"""
                                ---
                                **{comment.get('from_id', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}** ‚Ä¢ {datetime.datetime.fromtimestamp(comment.get('date', 0)).strftime('%d.%m.%Y %H:%M')}
                                
                                {comment.get('text', '')}
                                """)
                        else:
                            st.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            
            # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            if not st.session_state.full_df.empty:
                col1, col2 = st.columns(2)
                
                with col1:
                    # –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É
                    if 'matched_query' in st.session_state.full_df.columns:
                        queries = ['–í—Å–µ'] + list(st.session_state.full_df['matched_query'].unique())
                        selected_query = st.selectbox("üîç –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É:", queries)
                
                with col2:
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                    sort_options = {
                        '–ü–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)': ('date', False),
                        '–ü–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ)': ('date', True),
                        '–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤': ('likes_count', False),
                        '–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤': ('comments_count', False)
                    }
                    selected_sort = st.selectbox("üî¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:", list(sort_options.keys()))
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_df = st.session_state.full_df.copy()
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                if 'likes' in display_df.columns:
                    display_df['likes_count'] = display_df['likes'].apply(
                        lambda x: x.get('count', 0) if isinstance(x, dict) else 0
                    )
                
                if 'comments' in display_df.columns:
                    display_df['comments_count'] = display_df['comments'].apply(
                        lambda x: x.get('count', 0) if isinstance(x, dict) else 0
                    )
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                if selected_query != '–í—Å–µ':
                    display_df = display_df[display_df['matched_query'] == selected_query]
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                sort_column, ascending = sort_options[selected_sort]
                display_df = display_df.sort_values(by=sort_column, ascending=ascending)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
                st.write(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(display_df)}")
                
                for _, post in display_df.iterrows():
                    display_post_info(post)

if __name__ == "__main__":
    main()

