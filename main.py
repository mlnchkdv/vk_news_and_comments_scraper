import streamlit as st
import requests
import pandas as pd
import numpy as np
import time
import datetime
import re
from concurrent.futures import ThreadPoolExecutor, as_completed
import plotly.express as px
import plotly.graph_objects as go
from wordcloud import WordCloud
import matplotlib.pyplot as plt

def get_unixtime_from_datetime(dt):
    return int(time.mktime(dt.timetuple()))

def get_comments(post_id, owner_id, access_token):
    url = (
        f"https://api.vk.com/method/wall.getComments?"
        f"owner_id={owner_id}&post_id={post_id}&access_token={access_token}&v=5.131"
    )
    try:
        res = requests.get(url)
        json_text = res.json()
        if 'error' in json_text:
            if json_text['error']['error_code'] == 6:
                raise Exception("Too many requests per second")
            else:
                raise Exception(f"API Error: {json_text['error']['error_msg']}")
        return json_text.get('response', {}).get('items', [])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        return []

def execute_query(query, start_time, end_time, access_token, include_comments, search_mode):
    url = (
        f"https://api.vk.com/method/newsfeed.search?q={query}"
        f"&count=200"
        f"&access_token={access_token}"
        f"&start_time={start_time}"
        f"&end_time={end_time}"
        f"&v=5.131"
    )

    posts = []
    comments = []

    try:
        res = requests.get(url)
        json_text = res.json()
        if 'error' in json_text:
            if json_text['error']['error_code'] == 6:
                raise Exception("Too many requests per second")
            else:
                raise Exception(f"API Error: {json_text['error']['error_msg']}")

        if 'response' in json_text and 'items' in json_text['response']:
            for item in json_text['response']['items']:
                if search_mode == 'exact':
                    if re.search(r'\b' + re.escape(query) + r'\b', item.get('text', ''), re.IGNORECASE):
                        item['matched_query'] = query
                        posts.append(item)
                else:
                    if query.lower() in item.get('text', '').lower():
                        item['matched_query'] = query
                        posts.append(item)

                if include_comments:
                    post_comments = get_comments(item['id'], item['owner_id'], access_token)
                    for comment in post_comments:
                        comment['post_id'] = item['id']
                        comment['post_owner_id'] = item['owner_id']
                    comments.extend(post_comments)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    return posts, comments

def get_vk_newsfeed(queries, start_datetime, end_datetime, access_tokens, include_comments, progress_bar, status_text, time_sleep, search_mode, time_step, search_logic):
    all_posts = []
    all_comments = []

    delta = datetime.timedelta(hours=time_step)
    current_time = start_datetime

    total_steps = int((end_datetime - start_datetime) / delta)
    step_count = 0

    start_time = time.time()

    with ThreadPoolExecutor(max_workers=len(access_tokens)) as executor:
        while current_time < end_datetime:
            step_count += 1
            futures = []
            for query in queries:
                end_time = min(current_time + delta, end_datetime)
                token = access_tokens[step_count % len(access_tokens)]
                futures.append(executor.submit(
                    execute_query, 
                    query, 
                    get_unixtime_from_datetime(current_time),
                    get_unixtime_from_datetime(end_time),
                    token, 
                    include_comments, 
                    search_mode
                ))

            for future in as_completed(futures):
                try:
                    posts, comments = future.result()
                    if search_logic == 'AND':
                        matching_posts = [post for post in posts if all(q.lower() in post.get('text', '').lower() for q in queries)]
                    else:  # 'OR'
                        matching_posts = posts
                    all_posts.extend(matching_posts)
                    all_comments.extend(comments)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    if "Too many requests per second" in str(e):
                        st.warning("–í–Ω–∏–º–∞–Ω–∏–µ: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ API –∫–ª—é—á–µ–π.")

            progress = step_count / total_steps
            progress_bar.progress(progress)

            elapsed_time = time.time() - start_time
            eta = (elapsed_time / progress) - elapsed_time if progress > 0 else 0

            status_text.text(
                f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.2%} | ‚åõ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.1f} —Å–µ–∫\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)} | üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(all_comments)}\n"
                f"üïí –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_time} | ‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {eta/60:.1f} –º–∏–Ω"
            )

            current_time += delta
            time.sleep(time_sleep)

    df = pd.DataFrame(all_posts)
    comments_df = pd.DataFrame(all_comments)

    return df, comments_df

def main():
    st.set_page_config(page_title="VK Parser", page_icon="üìä", layout="wide")

    st.title("üìä VK –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

    with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
        st.markdown("""
        1. üîë **–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω VK API**:
           - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ [vkhost.github.io](https://vkhost.github.io/)
           - –ù–∞–∂–º–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", –≤—ã–±–µ—Ä–∏—Ç–µ "–°—Ç–µ–Ω–∞" –∏ "–î–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
           - –ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å" –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø
           - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ URL (–º–µ–∂–¥—É `access_token=` –∏ `&expires_in=`)
        
        2. üìù **–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã**:
           - –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
           - –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ—Ä–∞–∑—ã, –∑–∞–∫–ª—é—á–∏—Ç–µ –µ—ë –≤ –∫–∞–≤—ã—á–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
           - –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        
        3. üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞**:
           - –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è
           - –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —á–µ–º –±–æ–ª—å—à–µ –ø–µ—Ä–∏–æ–¥, —Ç–µ–º –¥–æ–ª—å—à–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–∞—Ä—Å–∏–Ω–≥
        
        4. üîç **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞**:
           - –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ (—Ç–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
           - –£–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞)
           - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à–∞–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–≤ —á–∞—Å–∞—Ö). –ú–µ–Ω—å—à–∏–π —à–∞–≥ –¥–∞—ë—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
           - –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ (–ò/–ò–õ–ò) –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        
        5. ‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏**:
           - –î–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π
           - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –∏ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        
        6. üöÄ **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥**:
           - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"
           - –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
        
        7. üìä **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**:
           - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–û–±–∑–æ—Ä"
           - –ò–∑—É—á–∞–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
           - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö "–ü–æ—Å—Ç—ã" –∏ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
           - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
           - –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        ‚ö†Ô∏è **–í–∞–∂–Ω–æ**: 
        - VK API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–µ –º–µ–Ω–µ–µ 0.5 —Å–µ–∫—É–Ω–¥.
        - –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.
        - –ü—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±–∏–≤–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤.
        
        üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**:
        - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python –∏ Streamlit
        - –î–ª—è —Ä–∞–±–æ—Ç—ã —Å API VK –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests
        - –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é concurrent.futures
        - –ì—Ä–∞—Ñ–∏–∫–∏ —Å—Ç—Ä–æ—è—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Plotly
        
        üí° **–°–æ–≤–µ—Ç—ã –ø–æ –≤—ã–≥—Ä—É–∑–∫–µ –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤**:
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        - –£–≤–µ–ª–∏—á—å—Ç–µ –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ 1-2 —Å–µ–∫—É–Ω–¥
        - –†–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω—å—à–∏—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –º–µ—Å—è—Ü–∞–º)
        - –í—ã–±–∏—Ä–∞–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6 –∏–ª–∏ 12 —á–∞—Å–æ–≤ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤)
        - –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ API VK –º–µ–Ω—å—à–µ
        """)

    access_tokens = st.text_area("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ VK API (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):", height=100).split('\n')
    access_tokens = [token.strip() for token in access_tokens if token.strip()]

    queries = st.text_area("üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        start_date = st.date_input("üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:")
    with col2:
        start_time = st.time_input("üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:")
    with col3:
        end_date = st.date_input("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:")
    with col4:
        end_time = st.time_input("üïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:")
    
    start_datetime = datetime.datetime.combine(start_date, start_time)
    end_datetime = datetime.datetime.combine(end_date, end_time)
    
    include_comments = st.checkbox("üí¨ –í–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", value=True)
    time_sleep = st.slider("‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)", min_value=0.5, max_value=10.0, value=5.0, step=0.1)

    search_mode = st.radio("üîç –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:", ["–¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞", "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"])
    search_logic = st.radio("üß† –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:", ["–ò", "–ò–õ–ò"])
    
    time_step = st.slider("üìä –®–∞–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—á–∞—Å—ã)", min_value=1, max_value=24, value=1, step=1)
    
    if 'full_df' not in st.session_state:
        st.session_state.full_df = None
    if 'comments_df' not in st.session_state:
        st.session_state.comments_df = None

    start_parsing = st.button("üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")

    if start_parsing:
        if not access_tokens or not queries or not start_date or not end_date:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
            return

        if (end_datetime - start_datetime).total_seconds() < 3600:
            st.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —á–∞—Å–∞.")
            return

        queries_list = [q.strip() for q in queries.split('\n') if q.strip()]

        progress_bar = st.progress(0)
        status_text = st.empty()

        status_text.text("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è...")
        df, comments_df = get_vk_newsfeed(queries_list, start_datetime, end_datetime, 
                                          access_tokens, include_comments, progress_bar, status_text, time_sleep,
                                          'exact' if search_mode == "–¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞" else 'partial', time_step,
                                          'AND' if search_logic == "–ò" else 'OR')
        status_text.text("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

        if not df.empty:
            df['date'] = pd.to_datetime(df['date'], unit='s')
            
            columns_order = ['matched_query', 'text', 'date', 'id', 'owner_id', 'from_id', 'likes', 'reposts', 'views', 'comments']
            df = df.reindex(columns=columns_order + [col for col in df.columns if col not in columns_order])

            st.session_state.full_df = df
            st.session_state.comments_df = comments_df
        else:
            st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")

    if st.session_state.full_df is not None:
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞")
        
        tab1, tab2, tab3, tab4 = st.tabs(["üìà –û–±–∑–æ—Ä", "üìù –ü–æ—Å—Ç—ã", "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"])
        
        with tab1:
            st.subheader("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤", len(st.session_state.full_df))
            with col2:
                st.metric("–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", len(st.session_state.comments_df))
            with col3:
                st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤", st.session_state.full_df['from_id'].nunique())

            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
            time_grouping = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", ["–ß–∞—Å–∞–º", "12 —á–∞—Å–∞–º", "–î–Ω—è–º", "–ù–µ–¥–µ–ª—è–º"])
            
            if time_grouping == "–ß–∞—Å–∞–º":
                df_grouped = st.session_state.full_df.groupby(st.session_state.full_df['date'].dt.floor('H')).size().reset_index(name='count')
            elif time_grouping == "12 —á–∞—Å–∞–º":
                df_grouped = st.session_state.full_df.groupby(st.session_state.full_df['date'].dt.floor('12H')).size().reset_index(name='count')
            elif time_grouping == "–î–Ω—è–º":
                df_grouped = st.session_state.full_df.groupby(st.session_state.full_df['date'].dt.date).size().reset_index(name='count')
            else:  # –ù–µ–¥–µ–ª—è–º
                df_grouped = st.session_state.full_df.groupby(st.session_state.full_df['date'].dt.to_period('W')).size().reset_index(name='count')
                df_grouped['date'] = df_grouped['date'].dt.start_time

            fig = px.bar(df_grouped, x='date', y='count', title=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ø–æ {time_grouping.lower()}")
            st.plotly_chart(fig)

            st.subheader("–¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤")
            top_authors = st.session_state.full_df['from_id'].value_counts().head(10)
            fig = px.bar(x=top_authors.index, y=top_authors.values, labels={'x': 'ID –∞–≤—Ç–æ—Ä–∞', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤'})
            fig.update_layout(title="–¢–æ–ø-10 –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å—Ç–æ–≤")
            st.plotly_chart(fig)

            st.subheader("–û–±–ª–∞–∫–æ —Ç–µ–≥–æ–≤")
            try:
                text = " ".join(review for review in st.session_state.full_df.text)
                wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
                fig, ax = plt.subplots(figsize=(10, 5))
                ax.imshow(wordcloud, interpolation='bilinear')
                ax.axis('off')
                st.pyplot(fig)
            except ImportError:
                st.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ wordcloud –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–±–ª–∞–∫–æ —Ç–µ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

        with tab2:
            st.dataframe(st.session_state.full_df)
            csv = st.session_state.full_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ—Å—Ç—ã (CSV)",
                data=csv,
                file_name="vk_posts.csv",
                mime="text/csv",
            )
        
        with tab3:
            if include_comments and not st.session_state.comments_df.empty:
                st.dataframe(st.session_state.comments_df)
                comments_csv = st.session_state.comments_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (CSV)",
                    data=comments_csv,
                    file_name="vk_comments.csv",
                    mime="text/csv",
                )
            else:
                st.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø–∞—Ä—Å–∏–Ω–≥ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        with tab4:
            st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            sort_option = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", ["–î–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)", "–î–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤", "–ö–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"])
            
            if sort_option == "–î–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)":
                sorted_df = st.session_state.full_df.sort_values('date', ascending=False)
            elif sort_option == "–î–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ)":
                sorted_df = st.session_state.full_df.sort_values('date')
            elif sort_option == "–ö–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤":
                sorted_df = st.session_state.full_df.sort_values('likes', ascending=False)
            else:
                sorted_df = st.session_state.full_df.sort_values('comments', ascending=False)

            for _, post in sorted_df.iterrows():
                with st.expander(f"–ü–æ—Å—Ç –æ—Ç {post['date']} | üëç {post['likes']} | üí¨ {post['comments']}"):
                    st.write(f"**–¢–µ–∫—Å—Ç:** {post['text']}")
                    st.write(f"**–ê–≤—Ç–æ—Ä:** {post['from_id']}")
                    st.write(f"**–°—Å—ã–ª–∫–∞:** https://vk.com/wall{post['owner_id']}_{post['id']}")
                    
                    if include_comments:
                        post_comments = st.session_state.comments_df[st.session_state.comments_df['post_id'] == post['id']]
                        if not post_comments.empty:
                            st.write("**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:**")
                            for _, comment in post_comments.iterrows():
                                st.write(f"- {comment['text']} (–æ—Ç {comment['from_id']})")

    st.markdown("---")
    st.markdown("–ê–≤—Ç–æ—Ä: [https://t.me/yourai](https://t.me/yourai)")

if __name__ == "__main__":
    main()